{"componentChunkName":"component---src-templates-doc-js","path":"/docs/master/core/bootstrap/","result":{"pageContext":{"html":"<h1 id=\"bootstraping-the-core-library\" style=\"position:relative;\"><a href=\"#bootstraping-the-core-library\" aria-label=\"bootstraping the core library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bootstraping the core library</h1>\n<p>You may want to run a minimal version of API Platform. This one file runs API Platform (without graphql, doctrine and mongodb).\nIt requires the following composer packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;symfony/http-kernel&quot;: &quot;^5.1&quot;,\n&quot;symfony/routing&quot;: &quot;^5.1&quot;,\n&quot;symfony/event-dispatcher&quot;: &quot;^5.1&quot;,\n&quot;api-platform/core&quot;: &quot;^v2.6.0-alpha.1&quot;,\n&quot;doctrine/annotations&quot;: &quot;^1.11&quot;,\n&quot;doctrine/common&quot;: &quot;^3.0&quot;,\n&quot;symfony/property-info&quot;: &quot;^5.1&quot;,\n&quot;phpdocumentor/reflection-docblock&quot;: &quot;^5.2&quot;,\n&quot;symfony/validator&quot;: &quot;^5.1&quot;,\n&quot;willdurand/negotiation&quot;: &quot;^3.0.0&quot;</code></pre></div>\n<p>The minimal version of API Platform:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?php\n\nrequire &#39;./vendor/autoload.php&#39;;\n\nuse ApiPlatform\\Core\\Action\\EntrypointAction;\nuse ApiPlatform\\Core\\Action\\ExceptionAction;\nuse ApiPlatform\\Core\\Action\\PlaceholderAction;\nuse ApiPlatform\\Core\\Api\\IdentifiersExtractor;\nuse ApiPlatform\\Core\\Api\\IdentifiersExtractorInterface;\nuse ApiPlatform\\Core\\Api\\OperationType;\nuse ApiPlatform\\Core\\Api\\ResourceClassResolver;\nuse ApiPlatform\\Core\\Api\\UrlGeneratorInterface as ApiUrlGeneratorInterface;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\Routing\\RouteNameGenerator;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\Validator\\EventListener\\ValidationExceptionListener;\nuse ApiPlatform\\Core\\Documentation\\DocumentationInterface;\nuse ApiPlatform\\Core\\EventListener\\AddFormatListener;\nuse ApiPlatform\\Core\\EventListener\\DeserializeListener;\nuse ApiPlatform\\Core\\EventListener\\ExceptionListener;\nuse ApiPlatform\\Core\\EventListener\\ReadListener;\nuse ApiPlatform\\Core\\EventListener\\WriteListener;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\PropertyInfo\\Metadata\\Property\\PropertyInfoPropertyMetadataFactory;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\PropertyInfo\\Metadata\\Property\\PropertyInfoPropertyNameCollectionFactory;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\Routing\\IriConverter;\nuse ApiPlatform\\Core\\Bridge\\Symfony\\Routing\\RouteNameResolver;\nuse ApiPlatform\\Core\\DataPersister\\DataPersisterInterface;\nuse ApiPlatform\\Core\\DataProvider\\ContextAwareCollectionDataProviderInterface;\nuse ApiPlatform\\Core\\DataProvider\\DenormalizedIdentifiersAwareItemDataProviderInterface;\nuse ApiPlatform\\Core\\DataProvider\\PaginationOptions;\nuse ApiPlatform\\Core\\DataProvider\\RestrictedDataProviderInterface;\nuse ApiPlatform\\Core\\EventListener\\RespondListener;\nuse ApiPlatform\\Core\\EventListener\\SerializeListener;\nuse ApiPlatform\\Core\\Hal\\Serializer\\CollectionNormalizer as HalCollectionNormalizer;\nuse ApiPlatform\\Core\\Hal\\Serializer\\EntrypointNormalizer as HalEntrypointNormalizer;\nuse ApiPlatform\\Core\\Hal\\Serializer\\ItemNormalizer as HalItemNormalizer;\nuse ApiPlatform\\Core\\Hal\\Serializer\\ObjectNormalizer as HalObjectNormalizer;\nuse ApiPlatform\\Core\\Hydra\\EventListener\\AddLinkHeaderListener;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\CollectionFiltersNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\CollectionNormalizer as HydraCollectionNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\ConstraintViolationListNormalizer as HydraConstraintViolationListNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\DocumentationNormalizer as HydraDocumentationNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\EntrypointNormalizer as HydraEntrypointNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\ErrorNormalizer as HydraErrorNormalizer;\nuse ApiPlatform\\Core\\Hydra\\Serializer\\PartialCollectionViewNormalizer;\nuse ApiPlatform\\Core\\Identifier\\IdentifierConverter;\nuse ApiPlatform\\Core\\Identifier\\Normalizer\\IntegerDenormalizer;\nuse ApiPlatform\\Core\\JsonLd\\Action\\ContextAction;\nuse ApiPlatform\\Core\\JsonLd\\Serializer\\ItemNormalizer as JsonLdItemNormalizer;\nuse ApiPlatform\\Core\\JsonLd\\Serializer\\ObjectNormalizer as JsonLdObjectNormalizer;\nuse ApiPlatform\\Core\\JsonLd\\ContextBuilder as JsonLdContextBuilder;\nuse ApiPlatform\\Core\\JsonSchema\\SchemaFactory;\nuse ApiPlatform\\Core\\JsonSchema\\TypeFactory;\nuse ApiPlatform\\Core\\Metadata\\Property\\Factory\\AnnotationPropertyMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Property\\Factory\\InheritedPropertyMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Property\\Factory\\InheritedPropertyNameCollectionFactory;\nuse ApiPlatform\\Core\\Metadata\\Property\\Factory\\SerializerPropertyMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\AnnotationResourceFilterMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\AnnotationResourceMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\AnnotationResourceNameCollectionFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\FormatsResourceMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\InputOutputResourceMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\OperationResourceMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\ResourceMetadataFactoryInterface;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\ResourceNameCollectionFactoryInterface;\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\ShortNameResourceMetadataFactory;\nuse ApiPlatform\\Core\\Metadata\\Resource\\ResourceMetadata;\nuse ApiPlatform\\Core\\OpenApi\\Factory\\OpenApiFactory;\nuse ApiPlatform\\Core\\OpenApi\\Factory\\OpenApiFactoryInterface;\nuse ApiPlatform\\Core\\OpenApi\\Options as OpenApiOptions;\nuse ApiPlatform\\Core\\OpenApi\\Serializer\\OpenApiNormalizer;\nuse ApiPlatform\\Core\\Operation\\Factory\\SubresourceOperationFactory;\nuse ApiPlatform\\Core\\Operation\\UnderscorePathSegmentNameGenerator;\nuse ApiPlatform\\Core\\PathResolver\\OperationPathResolver;\nuse ApiPlatform\\Core\\PathResolver\\OperationPathResolverInterface;\nuse ApiPlatform\\Core\\Problem\\Serializer\\ConstraintViolationListNormalizer as ProblemConstraintViolationListNormalizer;\nuse ApiPlatform\\Core\\Problem\\Serializer\\ErrorNormalizer;\nuse ApiPlatform\\Core\\Serializer\\ItemNormalizer;\nuse ApiPlatform\\Core\\Serializer\\JsonEncoder as JsonLdEncoder;\nuse ApiPlatform\\Core\\Serializer\\SerializerContextBuilder;\nuse ApiPlatform\\Core\\Validator\\EventListener\\ValidateListener;\nuse ApiPlatform\\Core\\Validator\\ValidatorInterface;\nuse Doctrine\\Common\\Annotations\\AnnotationReader;\nuse Negotiation\\Negotiator;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Log\\Logger;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolver;\nuse Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener;\nuse Symfony\\Component\\HttpKernel\\EventListener\\RouterListener;\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\nuse Symfony\\Component\\PropertyAccess\\PropertyAccess;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcher;\nuse Symfony\\Component\\Routing\\RequestContext;\nuse Symfony\\Component\\Routing\\Route;\nuse Symfony\\Component\\Routing\\RouteCollection;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\PhpDocExtractor;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\nuse Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor;\nuse Symfony\\Component\\Routing\\Generator\\UrlGenerator;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcherInterface;\nuse Symfony\\Component\\Routing\\RouterInterface;\nuse Symfony\\Component\\Serializer\\Mapping\\Factory\\ClassMetadataFactory;\nuse Symfony\\Component\\Serializer\\Mapping\\Loader\\AnnotationLoader;\nuse Symfony\\Component\\Serializer\\NameConverter\\MetadataAwareNameConverter;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Component\\Validator\\Validation;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Normalizer\\ArrayDenormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\ConstraintViolationListNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\DataUriNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateIntervalNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateTimeNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateTimeZoneNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\JsonSerializableNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\ProblemNormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\UnwrappingDenormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$allowPlainIdentifiers = false;\n$debug = true;\n$defaultContext = [];\n$dataTransformers = [];\n$patchFormats = [&#39;json&#39; =&gt; [&#39;application/merge-patch+json&#39;], &#39;jsonapi&#39; =&gt; [&#39;application/vnd.api+json&#39;]];\n$formats = [&#39;jsonld&#39; =&gt; [&#39;application/ld+json&#39;]];\n$errorFormats = [\n    &#39;jsonproblem&#39; =&gt; [&#39;application/problem+json&#39;],\n    &#39;jsonld&#39; =&gt; [&#39;application/ld+json&#39;],\n    &#39;jsonapi&#39; =&gt; [&#39;application/vnd.api+json&#39;]\n];\n\n$configuration = [\n    &#39;collection&#39; =&gt; [\n        &#39;pagination&#39; =&gt; [\n            &#39;page_parameter_name&#39; =&gt; &#39;page&#39;,\n            &#39;enabled_parameter_name&#39; =&gt; &#39;pagination&#39;\n        ]\n    ]\n];\n\n$exceptionToStatus = [\n    # The 4 following handlers are registered by default, keep those lines to prevent unexpected side effects\n    \\Symfony\\Component\\Serializer\\Exception\\ExceptionInterface::class =&gt; 400,\n    \\ApiPlatform\\Core\\Exception\\InvalidArgumentException::class =&gt; 400,\n    \\ApiPlatform\\Core\\Exception\\FilterValidationException::class =&gt; 400,\n    \\Doctrine\\ORM\\OptimisticLockException::class =&gt; 409,\n];\n\n$logger = new Logger();\n\n$phpDocExtractor = new PhpDocExtractor();\n$reflectionExtractor = new ReflectionExtractor();\n\n$propertyInfo = new PropertyInfoExtractor(\n    [$reflectionExtractor],\n    [$phpDocExtractor, $reflectionExtractor],\n    [$phpDocExtractor],\n    [$reflectionExtractor],\n    [$reflectionExtractor]\n);\n\n$doctrineAnnotationReader = new AnnotationReader();\n$classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader($doctrineAnnotationReader));\n\nfinal class FilterLocator implements ContainerInterface \n{\n    private $filters = [];\n    public function get($id) {\n        return $this-&gt;filters[$id] ?? null;\n    }\n\n    public function has($id) {\n        return isset($this-&gt;filter[$id]); \n    }\n}\n\n$apiPlatformAnnotationReader = $doctrineAnnotationReader;\nif (\\PHP_VERSION_ID &gt;= 80000) {\n    $apiPlatformAnnotationReader = null;\n}\n\n$filterLocator = new FilterLocator();\n\n$resourceNameCollectionFactory = new AnnotationResourceNameCollectionFactory($apiPlatformAnnotationReader, [&#39;./src/Entity&#39;]);\n$resourceMetadataFactory = new FormatsResourceMetadataFactory(new OperationResourceMetadataFactory(new ShortNameResourceMetadataFactory(new InputOutputResourceMetadataFactory(new AnnotationResourceFilterMetadataFactory($apiPlatformAnnotationReader, new AnnotationResourceMetadataFactory($apiPlatformAnnotationReader, null)))), $patchFormats), $formats, $patchFormats);;\n$propertyNameCollectionFactory = new InheritedPropertyNameCollectionFactory($resourceNameCollectionFactory, new PropertyInfoPropertyNameCollectionFactory($propertyInfo));\n$resourceClassResolver = new ResourceClassResolver($resourceNameCollectionFactory);\n$propertyMetadataFactory = new SerializerPropertyMetadataFactory($resourceMetadataFactory, $classMetadataFactory, new InheritedPropertyMetadataFactory($resourceNameCollectionFactory, new PropertyInfoPropertyMetadataFactory($propertyInfo, new AnnotationPropertyMetadataFactory($apiPlatformAnnotationReader))), $resourceClassResolver);\n\nclass Validator implements ValidatorInterface {\n    private $validator;\n    public function __construct($validator) \n    {\n        $this-&gt;validator = $validator;\n    }\n\n    public function validate($data, array $context = []) {\n        return $this-&gt;validator-&gt;validate($data, $context);\n    }\n}\n\n$validator = new Validator(Validation::createValidator());\n$validateListener = new ValidateListener($validator, $resourceMetadataFactory);\n\nclass DataProvider implements DenormalizedIdentifiersAwareItemDataProviderInterface, RestrictedDataProviderInterface, ContextAwareCollectionDataProviderInterface\n\n{\n    public function getCollection(string $resourceClass, string $operationName = null, array $context = [])\n    {\n        $book = new Book();\n        $book-&gt;id = &#39;1&#39;;\n        return [$book];\n    }\n\n    public function getItem(string $resourceClass, $identifiers, string $operationName = null, array $context = []) {\n        $book = new Book();\n        $book-&gt;id = $identifiers[&#39;id&#39;];\n        return $book;\n    }\n\n    public function supports(string $resourceClass, string $operationName = null, array $context = []): bool {\n        return true;\n    }\n}\n\n$dataProvider = new DataProvider();\n\nclass DataPersister implements DataPersisterInterface {\n    public function supports($data): bool\n    {\n        return true;\n    }\n    public function persist($data) {}\n    public function remove($data) {}\n}\n\n$dataPersister = new DataPersister();\n\n$propertyAccessor = PropertyAccess::createPropertyAccessor();\n$identifiersExtractor = new IdentifiersExtractor($propertyNameCollectionFactory, $propertyMetadataFactory, $propertyAccessor);\n$pathSegmentNameGenerator = new UnderscorePathSegmentNameGenerator(); \n$operationPathResolver = new OperationPathResolver($pathSegmentNameGenerator);\n$subresourceOperationFactory = new SubresourceOperationFactory($resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $pathSegmentNameGenerator);\n\nclass ApiLoader {\n    private $resourceNameCollectionFactory;\n    private $resourceMetadataFactory;\n    private $identifiersExtractor;\n    private $operationPathResolver;\n\n    public function __construct(ResourceNameCollectionFactoryInterface $resourceNameCollectionFactory, ResourceMetadataFactoryInterface $resourceMetadataFactory, IdentifiersExtractorInterface $identifiersExtractor, OperationPathResolverInterface $operationPathResolver)\n    {\n        $this-&gt;resourceNameCollectionFactory = $resourceNameCollectionFactory;\n        $this-&gt;resourceMetadataFactory = $resourceMetadataFactory;\n        $this-&gt;identifiersExtractor = $identifiersExtractor;\n        $this-&gt;operationPathResolver = $operationPathResolver;\n    }\n\n    public function load(): RouteCollection\n    {\n        $routeCollection = new RouteCollection();\n\n        foreach ($this-&gt;resourceNameCollectionFactory-&gt;create() as $resourceClass) {\n            $resourceMetadata = $this-&gt;resourceMetadataFactory-&gt;create($resourceClass);\n            $resourceShortName = $resourceMetadata-&gt;getShortName();\n\n            if (null === $resourceShortName) {\n                throw new InvalidResourceException(sprintf(&#39;Resource %s has no short name defined.&#39;, $resourceClass));\n            }\n\n            if (null !== $collectionOperations = $resourceMetadata-&gt;getCollectionOperations()) {\n                foreach ($collectionOperations as $operationName =&gt; $operation) {\n                    $this-&gt;addRoute($routeCollection, $resourceClass, $operationName, $operation, $resourceMetadata, OperationType::COLLECTION);\n                }\n            }\n\n            if (null !== $itemOperations = $resourceMetadata-&gt;getItemOperations()) {\n                foreach ($itemOperations as $operationName =&gt; $operation) {\n                    $this-&gt;addRoute($routeCollection, $resourceClass, $operationName, $operation, $resourceMetadata, OperationType::ITEM);\n                }\n            }\n        }\n\n        return $routeCollection;\n    }\n\n    private function addRoute(RouteCollection $routeCollection, string $resourceClass, string $operationName, array $operation, ResourceMetadata $resourceMetadata, string $operationType): void\n    {\n        $resourceShortName = $resourceMetadata-&gt;getShortName();\n\n        if (isset($operation[&#39;route_name&#39;])) {\n            if (!isset($operation[&#39;method&#39;])) {\n                @trigger_error(sprintf(&#39;Not setting the &quot;method&quot; attribute is deprecated and will not be supported anymore in API Platform 3.0, set it for the %s operation &quot;%s&quot; of the class &quot;%s&quot;.&#39;, OperationType::COLLECTION === $operationType ? &#39;collection&#39; : &#39;item&#39;, $operationName, $resourceClass), E_USER_DEPRECATED);\n            }\n\n            return;\n        }\n\n        if (!isset($operation[&#39;method&#39;])) {\n            throw new RuntimeException(sprintf(&#39;Either a &quot;route_name&quot; or a &quot;method&quot; operation attribute must exist for the operation &quot;%s&quot; of the resource &quot;%s&quot;.&#39;, $operationName, $resourceClass));\n        }\n\n        if (null === $controller = $operation[&#39;controller&#39;] ?? null) {\n            $controller = PlaceholderAction::class;\n        }\n\n        $operation[&#39;identified_by&#39;] = (array) ($operation[&#39;identified_by&#39;] ?? $resourceMetadata-&gt;getAttribute(&#39;identified_by&#39;, $this-&gt;identifiersExtractor ? $this-&gt;identifiersExtractor-&gt;getIdentifiersFromResourceClass($resourceClass) : [&#39;id&#39;]));\n        $operation[&#39;has_composite_identifier&#39;] = \\count($operation[&#39;identified_by&#39;]) &gt; 1 ? $resourceMetadata-&gt;getAttribute(&#39;composite_identifier&#39;, true) : false;\n        $path = trim(trim($resourceMetadata-&gt;getAttribute(&#39;route_prefix&#39;, &#39;&#39;)), &#39;/&#39;);\n        $path .= $this-&gt;operationPathResolver-&gt;resolveOperationPath($resourceShortName, $operation, $operationType, $operationName);\n\n        $route = new Route(\n            $path,\n            [\n                &#39;_controller&#39; =&gt; $controller,\n                &#39;_format&#39; =&gt; null,\n                &#39;_stateless&#39; =&gt; $operation[&#39;stateless&#39;],\n                &#39;_api_resource_class&#39; =&gt; $resourceClass,\n                &#39;_api_identified_by&#39; =&gt; $operation[&#39;identified_by&#39;],\n                &#39;_api_has_composite_identifier&#39; =&gt; $operation[&#39;has_composite_identifier&#39;],\n                sprintf(&#39;_api_%s_operation_name&#39;, $operationType) =&gt; $operationName,\n            ] + ($operation[&#39;defaults&#39;] ?? []),\n            $operation[&#39;requirements&#39;] ?? [],\n            $operation[&#39;options&#39;] ?? [],\n            $operation[&#39;host&#39;] ?? &#39;&#39;,\n            $operation[&#39;schemes&#39;] ?? [],\n            [$operation[&#39;method&#39;]],\n            $operation[&#39;condition&#39;] ?? &#39;&#39;\n        );\n\n        $routeCollection-&gt;add(RouteNameGenerator::generate($operationName, $resourceShortName, $operationType), $route);\n    }\n}\n\n$apiLoader = new ApiLoader($resourceNameCollectionFactory, $resourceMetadataFactory, $identifiersExtractor, $operationPathResolver);\n$routes = $apiLoader-&gt;load();\n\n$requestContext = new RequestContext();\n$matcher = new UrlMatcher($routes, $requestContext);\n$generator = new UrlGenerator($routes, $requestContext);\n\nclass Router implements RouterInterface \n{\n    private $routes;\n    private $context;\n    private $matcher;\n    private $generator;\n\n    public function __construct(RouteCollection $routes, UrlMatcherInterface $matcher, UrlGeneratorInterface $generator, RequestContext $requestContext) \n    {\n        $this-&gt;routes = $routes;\n        $this-&gt;matcher = $matcher;\n        $this-&gt;generator = $generator;\n        $this-&gt;context = $requestContext;\n    }\n\n    public function getRouteCollection() {\n        return $this-&gt;routes;\n    }\n\n    public function match(string $pathinfo) {\n        return $this-&gt;matcher-&gt;match($pathinfo);\n    }\n\n    public function setContext(RequestContext $context) {\n        $this-&gt;context = $context;\n    }\n\n    public function getContext() {\n        return $this-&gt;context;\n    }\n\n    public function generate(string $name, array $parameters = [], int $referenceType = self::ABSOLUTE_PATH) {\n        return $this-&gt;generator-&gt;generate($name, $parameters, $referenceType);\n    }\n}\n\nclass ApiUrlGenerator implements ApiUrlGeneratorInterface {\n    private $generator;\n\n    public function __construct(UrlGeneratorInterface $generator)\n    {\n        $this-&gt;generator = $generator;\n    }\n\n    public function generate($name, $parameters = [], $referenceType = self::ABS_PATH) {\n        return $this-&gt;generator-&gt;generate($name, $parameters, $referenceType ?: self::ABS_PATH);\n    }\n}\n\n$apiUrlGenerator = new ApiUrlGenerator($generator);\n\n$router = new Router($routes, $matcher, $generator, $requestContext);\n$routeNameResolver = new RouteNameResolver($router);\n\n$identifierDenormalizers = [new IntegerDenormalizer()];\n$identifierConverter = new IdentifierConverter($identifiersExtractor, $propertyMetadataFactory, $identifierDenormalizers, $resourceMetadataFactory);\n\n$iriConverter = new IriConverter($propertyNameCollectionFactory, $propertyMetadataFactory, $dataProvider, $routeNameResolver, $router, $propertyAccessor, $identifiersExtractor, /** SubresourceDataProviderInterface */ null, $identifierConverter, $resourceClassResolver, $resourceMetadataFactory);\n\n$writeListener = new WriteListener($dataPersister, $iriConverter, $resourceMetadataFactory, $resourceClassResolver);\n\n$serializerContextBuilder = new SerializerContextBuilder($resourceMetadataFactory);\n\n$objectNormalizer = new ObjectNormalizer();\n\n$nameConverter = new MetadataAwareNameConverter($classMetadataFactory);\n$jsonLdContextBuilder = new JsonLdContextBuilder($resourceNameCollectionFactory, $resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $apiUrlGenerator, $nameConverter);\n$jsonLdItemNormalizer = new JsonLdItemNormalizer($resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $iriConverter, $resourceClassResolver, $jsonLdContextBuilder, $propertyAccessor, $nameConverter, $classMetadataFactory, $defaultContext,  $dataTransformers, /** resource access checker **/ null);\n$jsonLdObjectNormalizer = new JsonLdObjectNormalizer($objectNormalizer, $iriConverter, $jsonLdContextBuilder);\n$jsonLdEncoder = new JsonLdEncoder(&#39;jsonld&#39;, new JsonEncoder());\n\n$problemConstraintViolationListNormalizer = new ProblemConstraintViolationListNormalizer([], $nameConverter, $defaultContext);\n\n$hydraCollectionNormalizer = new HydraCollectionNormalizer($jsonLdContextBuilder, $resourceClassResolver, $iriConverter, $defaultContext);\n$hydraPartialCollectionNormalizer = new PartialCollectionViewNormalizer($hydraCollectionNormalizer, $configuration[&#39;collection&#39;][&#39;pagination&#39;][&#39;page_parameter_name&#39;], $configuration[&#39;collection&#39;][&#39;pagination&#39;][&#39;enabled_parameter_name&#39;], $resourceMetadataFactory, $propertyAccessor);\n$hydraCollectionFiltersNormalizer = new CollectionFiltersNormalizer($hydraPartialCollectionNormalizer, $resourceMetadataFactory, $resourceClassResolver, $filterLocator);\n$hydraErrorNormalizer = new HydraErrorNormalizer($apiUrlGenerator, $debug, $defaultContext);\n$hydraEntrypointNormalizer = new HydraEntrypointNormalizer($resourceMetadataFactory, $iriConverter, $apiUrlGenerator);\n$hydraDocumentationNormalizer = new HydraDocumentationNormalizer($resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $resourceClassResolver, null, $apiUrlGenerator, /* SubresourceOperationFactoryInterface */ null, $nameConverter);\n$hydraConstraintViolationNormalizer = new HydraConstraintViolationListNormalizer($apiUrlGenerator, [], $nameConverter);\n\n$problemErrorNormalizer = new ErrorNormalizer($debug, $defaultContext);\n\n$itemNormalizer = new ItemNormalizer($propertyNameCollectionFactory, $propertyMetadataFactory, $iriConverter, $resourceClassResolver, $propertyAccessor, $nameConverter, $classMetadataFactory, $dataProvider, $allowPlainIdentifiers, $logger, $dataTransformers, $resourceMetadataFactory, /** resourceAccessChecker **/ null);\n\n$arrayDenormalizer = new ArrayDenormalizer();\n$problemNormalizer = new ProblemNormalizer($debug, $defaultContext);\n$jsonserializableNormalizer = new JsonSerializableNormalizer($classMetadataFactory, $nameConverter, $defaultContext);\n$dateTimeNormalizer = new DateTimeNormalizer($defaultContext);\n$dataUriNormalizer = new DataUriNormalizer();\n$dateIntervalNormalizer = new DateIntervalNormalizer($defaultContext);\n$dateTimeZoneNormalizer = new DateTimeZoneNormalizer();\n$constraintViolationListNormalizer = new ConstraintViolationListNormalizer($defaultContext, $nameConverter);\n$unwrappingDenormalizer = new UnwrappingDenormalizer($propertyAccessor);\n\n$halItemNormalizer = new HalItemNormalizer($propertyNameCollectionFactory, $propertyMetadataFactory, $iriConverter, $resourceClassResolver, $propertyAccessor, $nameConverter, $classMetadataFactory, $dataProvider, $allowPlainIdentifiers, $defaultContext, $dataTransformers, $resourceMetadataFactory, /** resourceAccessChecker **/ null);\n\n$halEntrypointNormalizer = new HalEntrypointNormalizer($resourceMetadataFactory, $iriConverter, $apiUrlGenerator);\n$halCollectionNormalizer = new HalCollectionNormalizer($resourceClassResolver, $configuration[&#39;collection&#39;][&#39;pagination&#39;][&#39;page_parameter_name&#39;], $resourceMetadataFactory);\n$halObjectNormalizer = new HalObjectNormalizer($objectNormalizer, $iriConverter);\n\n$openApiNormalizer = new OpenApiNormalizer($objectNormalizer);\n\n$list = new \\SplPriorityQueue();\n$list-&gt;insert($unwrappingDenormalizer, 1000);\n$list-&gt;insert($halItemNormalizer, -890);\n$list-&gt;insert($hydraConstraintViolationNormalizer, -780);\n$list-&gt;insert($hydraEntrypointNormalizer, -800);\n$list-&gt;insert($hydraErrorNormalizer, -800);\n$list-&gt;insert($hydraCollectionFiltersNormalizer, -800);\n$list-&gt;insert($halEntrypointNormalizer, -800);\n$list-&gt;insert($halCollectionNormalizer, -985);\n$list-&gt;insert($halObjectNormalizer, -995);\n$list-&gt;insert($jsonLdItemNormalizer, -890);\n$list-&gt;insert($problemConstraintViolationListNormalizer, -780);\n$list-&gt;insert($problemErrorNormalizer, -810);\n$list-&gt;insert($jsonLdObjectNormalizer, -995);\n$list-&gt;insert($constraintViolationListNormalizer, -915);\n$list-&gt;insert($arrayDenormalizer, -990);\n$list-&gt;insert($dateTimeZoneNormalizer, -915);\n$list-&gt;insert($dateIntervalNormalizer, -915);\n$list-&gt;insert($dataUriNormalizer, -920);\n$list-&gt;insert($dateTimeNormalizer, -910);\n$list-&gt;insert($jsonserializableNormalizer, -900);\n$list-&gt;insert($problemNormalizer, -890);\n$list-&gt;insert($objectNormalizer, -1000);\n$list-&gt;insert($itemNormalizer, -895);\n// $list-&gt;insert($uuidDenormalizer, -895); //Todo ramsey uuid support ?\n$list-&gt;insert($openApiNormalizer, -780);\n\n// TODO: JSON-API support\n/**\n * api_platform.jsonapi.normalizer.error                       -790       ApiPlatform\\Core\\JsonApi\\Serializer\\ErrorNormalizer\n * api_platform.jsonapi.normalizer.constraint_violation_list   -780       ApiPlatform\\Core\\JsonApi\\Serializer\\ConstraintViolationListNormalizer\n * api_platform.openapi.normalizer.api_gateway                 -780       ApiPlatform\\Core\\Swagger\\Serializer\\ApiGatewayNormalizer\n * api_platform.jsonapi.normalizer.entrypoint                  -800       ApiPlatform\\Core\\JsonApi\\Serializer\\EntrypointNormalizer\n * api_platform.jsonapi.normalizer.collection                  -985       ApiPlatform\\Core\\JsonApi\\Serializer\\CollectionNormalizer\n * api_platform.jsonapi.normalizer.item                        -890       ApiPlatform\\Core\\JsonApi\\Serializer\\ItemNormalizer\n * api_platform.jsonapi.normalizer.object                      -995       ApiPlatform\\Core\\JsonApi\\Serializer\\ObjectNormalizer\n */\n\n$encoders = [new JsonEncoder(), $jsonLdEncoder];\n$serializer = new Serializer(iterator_to_array($list), $encoders);\n\n$serializeListener = new SerializeListener($serializer, $serializerContextBuilder, $resourceMetadataFactory);\n$respondListener = new RespondListener($resourceMetadataFactory);\n$formatListener = new AddFormatListener(new Negotiator(), $resourceMetadataFactory, $formats);\n$readListener = new ReadListener($dataProvider, $dataProvider, /** SubresourceDataProvider **/ null, $serializerContextBuilder, $identifierConverter, $resourceMetadataFactory);\n$deserializeListener = new DeserializeListener($serializer, $serializerContextBuilder, $formats, $resourceMetadataFactory);\n$addLinkHeaderListener = new AddLinkHeaderListener($apiUrlGenerator);\n$validationExceptionListener = new ValidationExceptionListener($serializer, $errorFormats, $exceptionToStatus);\n\n$controller = new ExceptionAction($serializer, $errorFormats, $exceptionToStatus);\n$errorListener = new ErrorListener($controller);\n$exceptionListener = new ExceptionListener($controller, null, $debug, $errorListener);\n\n$dispatcher = new EventDispatcher();\n$dispatcher-&gt;addSubscriber(new RouterListener($matcher, new RequestStack()));\n$dispatcher-&gt;addListener(&#39;kernel.view&#39;, [$validateListener, &#39;onKernelView&#39;], 64);\n$dispatcher-&gt;addListener(&#39;kernel.view&#39;, [$writeListener, &#39;onKernelView&#39;], 32);\n$dispatcher-&gt;addListener(&#39;kernel.view&#39;, [$serializeListener, &#39;onKernelView&#39;], 16);\n// TODO: ApiPlatform\\Core\\EventListener\\QueryParameterValidateListener, prio 16   \n$dispatcher-&gt;addListener(&#39;kernel.view&#39;, [$respondListener, &#39;onKernelView&#39;], 8);\n$dispatcher-&gt;addListener(&#39;kernel.request&#39;, [$formatListener, &#39;onKernelRequest&#39;], 7);\n$dispatcher-&gt;addListener(&#39;kernel.request&#39;, [$readListener, &#39;onKernelRequest&#39;], 4);\n$dispatcher-&gt;addListener(&#39;kernel.request&#39;, [$deserializeListener, &#39;onKernelRequest&#39;], 2);\n$dispatcher-&gt;addListener(&#39;kernel.exception&#39;, [$validationExceptionListener, &#39;onKernelException&#39;], 2);\n// $dispatcher-&gt;addListener(&#39;kernel.exception&#39;, [$exceptionListener, &#39;onKernelException&#39;], -96);\n$dispatcher-&gt;addListener(&#39;kernel.response&#39;, [$addLinkHeaderListener, &#39;onKernelResponse&#39;], 2);\n\n/*\n * TODO: \n * api_platform.security.listener.request.deny_access     kernel.request      onSecurity                  3          ApiPlatform\\Core\\Security\\EventListener\\DenyAccessListener\n *   &quot;                                                    kernel.request      onSecurityPostDenormalize   1                                                                   \n * api_platform.swagger.listener.ui                       kernel.request      onKernelRequest                        ApiPlatform\\Core\\Bridge\\Symfony\\Bundle\\EventListener\\SwaggerUiListener\n * api_platform.http_cache.listener.response.configure    kernel.response     onKernelResponse            -1         ApiPlatform\\Core\\HttpCache\\EventListener\\AddHeadersListener\n*/\n\nfinal class DocumentationAction \n{\n    private $openApiFactory;\n    public function __construct(OpenApiFactoryInterface $openApiFactory)\n    {\n        $this-&gt;openApiFactory = $openApiFactory;\n    }\n\n    public function __invoke(Request $request): DocumentationInterface\n    {\n        $context = [&#39;base_url&#39; =&gt; $request-&gt;getBaseUrl(), &#39;spec_version&#39; =&gt; 3];\n        if ($request-&gt;query-&gt;getBoolean(&#39;api_gateway&#39;)) {\n            $context[&#39;api_gateway&#39;] = true;\n        }\n\n        return $this-&gt;openApiFactory-&gt;__invoke($context);\n    }\n}\n\n$paginationOptions = new PaginationOptions();\n$openApiOptions = new OpenApiOptions(&#39;API Platform&#39;);\n$jsonSchemaTypeFactory = new TypeFactory($resourceClassResolver);\n$jsonSchemaFactory = new SchemaFactory($jsonSchemaTypeFactory, $resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $nameConverter, $resourceClassResolver);\n\n$openApiFactory = new OpenApiFactory($resourceNameCollectionFactory, $resourceMetadataFactory, $propertyNameCollectionFactory, $propertyMetadataFactory, $jsonSchemaFactory, $jsonSchemaTypeFactory, $operationPathResolver, $filterLocator, $subresourceOperationFactory, $identifiersExtractor, $formats, $openApiOptions, $paginationOptions);\n$documentationAction = new DocumentationAction($openApiFactory);\n$routes-&gt;add(&#39;api_doc&#39;, new Route(&#39;/docs.{_format}&#39;, [&#39;_controller&#39; =&gt; $documentationAction, &#39;_format&#39; =&gt; null, &#39;_api_respond&#39; =&gt; true]));\n\n$entryPointAction = new EntrypointAction($resourceNameCollectionFactory);\n$routes-&gt;add(&#39;api_entrypoint&#39;, new Route(&#39;/{index}.{_format}&#39;, [&#39;_controller&#39; =&gt; $entryPointAction, &#39;_format&#39; =&gt; null, &#39;_api_respond&#39; =&gt; true, &#39;index&#39; =&gt; &#39;index&#39;], [&#39;index&#39; =&gt; &#39;index&#39;]));\n\n$contextAction = new ContextAction($jsonLdContextBuilder, $resourceNameCollectionFactory, $resourceMetadataFactory);\n$routes-&gt;add(&#39;api_jsonld_context&#39;, new Route(&#39;/contexts/{shortName}.{_format}&#39;, [&#39;_controller&#39; =&gt; $contextAction, &#39;_format&#39; =&gt; &#39;jsonld&#39;, &#39;_api_respond&#39; =&gt; true], [&#39;shortName&#39; =&gt; &#39;.+&#39;]));\n\n$controllerResolver = new ControllerResolver();\n$argumentResolver = new ArgumentResolver();\n\n$kernel = new HttpKernel($dispatcher, $controllerResolver, new RequestStack(), $argumentResolver);\n\n$request = Request::createFromGlobals();\n$response = $kernel-&gt;handle($request);\n$response-&gt;send();\n$kernel-&gt;terminate($request, $response);</code></pre></div>","nav":{"chapters":[{"title":"The Distribution: Create Powerful APIs with Ease","path":"distribution","items":[{"id":"index","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App","anchors":[{"id":"installing-the-framework","title":"Installing the Framework","anchors":[{"id":"using-the-api-platform-distribution-recommended","title":"Using the API Platform Distribution (Recommended)"},{"id":"using-symfony-flex-and-composer-advanced-users","title":"Using Symfony Flex and Composer (Advanced Users)"}]},{"id":"its-ready","title":"It's Ready!"},{"id":"bringing-your-own-model","title":"Bringing your Own Model"},{"id":"validating-data","title":"Validating Data"},{"id":"adding-graphql-support","title":"Adding GraphQL Support"},{"id":"the-admin","title":"The Admin"},{"id":"a-react-progressive-web-app","title":"A React Progressive Web App"},{"id":"hooking-your-own-business-logic","title":"Hooking Your Own Business Logic"},{"id":"other-features","title":"Other Features"},{"id":"screencasts","title":"Screencasts"}]},{"id":"testing","title":"Testing the API","anchors":[{"id":"creating-data-fixtures","title":"Creating Data Fixtures"},{"id":"writing-functional-tests","title":"Writing Functional Tests"},{"id":"writing-unit-tests","title":"Writing Unit Tests"},{"id":"additional-and-alternative-testing-tools","title":"Additional and Alternative Testing Tools"},{"id":"using-the-api-platform-distribution-for-end-to-end-testing","title":"Using the API Platform Distribution for End-to-end Testing"}]},{"id":"debugging","title":"Debugging","anchors":[{"id":"xdebug","title":"Xdebug"},{"id":"add-a-development-stage-to-the-dockerfile","title":"Add a Development Stage to the Dockerfile"},{"id":"configure-xdebug-with-docker-compose-override","title":"Configure Xdebug with Docker Compose Override"},{"id":"troubleshooting","title":"Troubleshooting"}]}]},{"title":"The API Component","path":"core","items":[{"id":"index","title":"The API Platform Core Library","anchors":[{"id":"features","title":"Features"},{"id":"screencasts","title":"Screencasts"}]},{"id":"getting-started","title":"Getting started","anchors":[{"id":"installing-api-platform-core","title":"Installing API Platform Core"},{"id":"before-reading-this-documentation","title":"Before Reading this Documentation"},{"id":"mapping-the-entities","title":"Mapping the Entities"}]},{"id":"design","title":"General Design Considerations"},{"id":"extending","title":"Extending API Platform","anchors":[{"id":"doctrine-specific-extension-points","title":"Doctrine Specific Extension Points"},{"id":"leveraging-the-built-in-infrastructure-using-composition","title":"Leveraging the Built-in Infrastructure Using Composition"}]},{"id":"testing","title":"Testing Utilities","anchors":[{"id":"the-test-httpclient","title":"The Test HttpClient"},{"id":"api-test-assertions","title":"API Test Assertions"},{"id":"http-test-assertions","title":"HTTP Test Assertions"}]},{"id":"operations","title":"Operations","anchors":[{"id":"enabling-and-disabling-operations","title":"Enabling and Disabling Operations"},{"id":"configuring-operations","title":"Configuring Operations"},{"id":"prefixing-all-routes-of-all-operations","title":"Prefixing All Routes of All Operations"},{"id":"expose-a-model-without-any-routes","title":"Expose a model without any routes"}]},{"id":"graphql","title":"GraphQL Support","anchors":[{"id":"enabling-graphql","title":"Enabling GraphQL"},{"id":"changing-location-of-the-graphql-endpoint","title":"Changing Location of the GraphQL Endpoint"},{"id":"graphiql","title":"GraphiQL","anchors":[{"id":"add-another-location-for-graphiql","title":"Add another Location for GraphiQL"}]},{"id":"graphql-playground","title":"GraphQL Playground","anchors":[{"id":"add-another-location-for-graphql-playground","title":"Add another Location for GraphQL Playground"}]},{"id":"modifying-or-disabling-the-default-ide","title":"Modifying or Disabling the Default IDE"},{"id":"request-with-applicationgraphql-content-type","title":"Request with application/graphql Content-Type"},{"id":"operations","title":"Operations"},{"id":"queries","title":"Queries","anchors":[{"id":"global-object-identifier","title":"Global Object Identifier"},{"id":"custom-queries","title":"Custom Queries"}]},{"id":"mutations","title":"Mutations","anchors":[{"id":"client-mutation-id","title":"Client Mutation Id"},{"id":"custom-mutations","title":"Custom Mutations"}]},{"id":"subscriptions","title":"Subscriptions","anchors":[{"id":"enable-update-subscriptions-for-a-resource","title":"Enable Update Subscriptions for a Resource"},{"id":"subscribe","title":"Subscribe"},{"id":"receiving-an-update","title":"Receiving an Update"},{"id":"subscriptions-cache","title":"Subscriptions Cache"}]},{"id":"workflow-of-the-resolvers","title":"Workflow of the Resolvers","anchors":[{"id":"disabling-resolver-stages","title":"Disabling Resolver Stages"}]},{"id":"events","title":"Events"},{"id":"filters","title":"Filters","anchors":[{"id":"syntax-for-filters-with-a-list-of-key--value-arguments","title":"Syntax for Filters with a List of Key / Value Arguments"},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"using-the-cursor-based-pagination","title":"Using the Cursor-based Pagination"},{"id":"using-the-page-based-pagination","title":"Using the Page-based Pagination"},{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"for-a-specific-resource-collection-operation","title":"For a Specific Resource Collection Operation"}]}]},{"id":"security","title":"Security"},{"id":"serialization-groups","title":"Serialization Groups","anchors":[{"id":"different-types-when-using-different-serialization-groups","title":"Different Types when Using Different Serialization Groups"}]},{"id":"exception-and-error","title":"Exception and Error","anchors":[{"id":"handling-exceptions-and-errors-logging-filtering-","title":"Handling Exceptions and Errors (Logging, Filtering, ...)"},{"id":"formatting-exceptions-and-errors","title":"Formatting Exceptions and Errors","anchors":[{"id":"custom-exception-normalizer","title":"Custom Exception Normalizer"}]}]},{"id":"name-conversion","title":"Name Conversion","anchors":[{"id":"nesting-separator","title":"Nesting Separator"}]},{"id":"custom-types","title":"Custom Types"},{"id":"modify-the-extracted-types","title":"Modify the Extracted Types"},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"export-the-schema-in-sdl","title":"Export the Schema in SDL"},{"id":"handling-file-upload","title":"Handling File Upload","anchors":[{"id":"configuring-the-entity-receiving-the-uploaded-file","title":"Configuring the Entity Receiving the Uploaded File"},{"id":"resolving-the-file-upload","title":"Resolving the File Upload"},{"id":"using-the-createmediaobject-mutation","title":"Using the createMediaObject Mutation"}]},{"id":"change-default-descriptions","title":"Change Default Descriptions"}]},{"id":"data-providers","title":"Data Providers","anchors":[{"id":"custom-collection-data-provider","title":"Custom Collection Data Provider"},{"id":"custom-item-data-provider","title":"Custom Item Data Provider"},{"id":"injecting-the-serializer-in-an-itemdataprovider","title":"Injecting the Serializer in an ItemDataProvider"},{"id":"injecting-extensions-pagination-filter-eagerloading-etc","title":"Injecting Extensions (Pagination, Filter, EagerLoading etc.)"},{"id":"community-data-providers","title":"Community Data Providers"}]},{"id":"data-persisters","title":"Data Persisters","anchors":[{"id":"creating-a-custom-data-persister","title":"Creating a Custom Data Persister"},{"id":"decorating-the-built-in-data-persisters","title":"Decorating the Built-In Data Persisters"}]},{"id":"filters","title":"Filters","anchors":[{"id":"doctrine-orm-and-mongodb-odm-filters","title":"Doctrine ORM and MongoDB ODM Filters","anchors":[{"id":"basic-knowledge","title":"Basic Knowledge"},{"id":"search-filter","title":"Search Filter"},{"id":"date-filter","title":"Date Filter","anchors":[{"id":"managing-null-values","title":"Managing null Values"}]},{"id":"boolean-filter","title":"Boolean Filter"},{"id":"numeric-filter","title":"Numeric Filter"},{"id":"range-filter","title":"Range Filter"},{"id":"exists-filter","title":"Exists Filter","anchors":[{"id":"using-a-custom-exists-query-parameter-name","title":"Using a Custom Exists Query Parameter Name"}]},{"id":"order-filter-sorting","title":"Order Filter (Sorting)","anchors":[{"id":"comparing-with-null-values","title":"Comparing with Null Values"},{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"},{"id":"enabling-a-filter-for-all-properties-of-a-resource","title":"Enabling a Filter for All Properties of a Resource"}]},{"id":"elasticsearch-filters","title":"Elasticsearch Filters","anchors":[{"id":"ordering-filter-sorting","title":"Ordering Filter (Sorting)","anchors":[{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"match-filter","title":"Match Filter"},{"id":"term-filter","title":"Term Filter"},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"serializer-filters","title":"Serializer Filters","anchors":[{"id":"group-filter","title":"Group Filter"},{"id":"property-filter","title":"Property filter"}]},{"id":"creating-custom-filters","title":"Creating Custom Filters","anchors":[{"id":"creating-custom-doctrine-orm-filters","title":"Creating Custom Doctrine ORM Filters","anchors":[{"id":"manual-service-and-attribute-registration","title":"Manual Service and Attribute Registration"}]},{"id":"creating-custom-doctrine-mongodb-odm-filters","title":"Creating Custom Doctrine MongoDB ODM Filters"},{"id":"creating-custom-elasticsearch-filters","title":"Creating Custom Elasticsearch Filters"},{"id":"using-doctrine-orm-filters","title":"Using Doctrine ORM Filters"}]},{"id":"apifilter-annotation","title":"ApiFilter Annotation"}]},{"id":"subresources","title":"Subresources","anchors":[{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-custom-paths","title":"Using Custom Paths","anchors":[{"id":"access-control-of-subresources","title":"Access Control of Subresources"},{"id":"limiting-depth","title":"Limiting Depth"}]}]},{"id":"serialization","title":"The Serialization Process","anchors":[{"id":"overall-process","title":"Overall Process"},{"id":"available-serializers","title":"Available Serializers"},{"id":"the-serialization-context-groups-and-relations","title":"The Serialization Context, Groups and Relations","anchors":[{"id":"configuration","title":"Configuration"}]},{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-serialization-groups-per-operation","title":"Using Serialization Groups per Operation"},{"id":"embedding-relations","title":"Embedding Relations","anchors":[{"id":"normalization","title":"Normalization"},{"id":"denormalization","title":"Denormalization"},{"id":"force-iri-with-relations-of-the-same-type-parentchilds-relations","title":"Force IRI with relations of the same type (parent/childs relations)"}]},{"id":"calculated-field","title":"Calculated Field"},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"changing-the-serialization-context-on-a-per-item-basis","title":"Changing the Serialization Context on a Per-item Basis"},{"id":"name-conversion","title":"Name Conversion"},{"id":"decorating-a-serializer-and-adding-extra-data","title":"Decorating a Serializer and Adding Extra Data"},{"id":"entity-identifier-case","title":"Entity Identifier Case"},{"id":"embedding-the-json-ld-context","title":"Embedding the JSON-LD Context"},{"id":"collection-relation","title":"Collection Relation"}]},{"id":"validation","title":"Validation","anchors":[{"id":"validating-submitted-data","title":"Validating Submitted Data"},{"id":"using-validation-groups","title":"Using Validation Groups"},{"id":"using-validation-groups-on-operations","title":"Using Validation Groups on Operations"},{"id":"dynamic-validation-groups","title":"Dynamic Validation Groups"},{"id":"sequential-validation-groups","title":"Sequential Validation Groups"},{"id":"error-levels-and-payload-serialization","title":"Error Levels and Payload Serialization"},{"id":"validation-on-collection-relations","title":"Validation on Collection Relations"},{"id":"open-vocabulary-generated-from-validation-metadata","title":"Open Vocabulary Generated from Validation Metadata"},{"id":"specification-property-restrictions","title":"Specification property restrictions"}]},{"id":"security","title":"Security","anchors":[{"id":"executing-access-control-rules-after-denormalization","title":"Executing Access Control Rules After Denormalization"},{"id":"hooking-custom-permission-checks-using-voters","title":"Hooking Custom Permission Checks Using Voters"},{"id":"configuring-the-access-control-error-message","title":"Configuring the Access Control Error Message"},{"id":"filtering-collection-according-to-the-current-user-permissions","title":"Filtering Collection According to the Current User Permissions"},{"id":"disabling-operations","title":"Disabling Operations"},{"id":"changing-serialization-groups-depending-of-the-current-user","title":"Changing Serialization Groups Depending of the Current User"}]},{"id":"content-negotiation","title":"Content Negotiation","anchors":[{"id":"configuring-formats-globally","title":"Configuring Formats Globally"},{"id":"configuring-patch-formats","title":"Configuring PATCH Formats"},{"id":"configuring-error-formats","title":"Configuring Error Formats"},{"id":"configuring-formats-for-a-specific-resource-or-operation","title":"Configuring Formats For a Specific Resource or Operation"},{"id":"supporting-custom-formats","title":"Supporting Custom Formats","anchors":[{"id":"reusing-the-api-platform-infrastructure","title":"Reusing the API Platform Infrastructure"},{"id":"contributing-support-for-new-formats","title":"Contributing Support for New Formats"}]}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a specific resource"}]}]},{"id":"changing-the-number-of-items-per-page","title":"Changing the Number of Items per Page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"changing-maximum-items-per-page","title":"Changing Maximum items per page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"for-a-specific-resource-collection-operation","title":"For a Specific Resource Collection Operation"}]},{"id":"partial-pagination","title":"Partial Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"cursor-based-pagination","title":"Cursor based pagination"},{"id":"controlling-the-behavior-of-the-doctrine-orm-paginator","title":"Controlling the behavior of the Doctrine ORM Paginator"},{"id":"custom-controller-action","title":"Custom Controller Action"}]},{"id":"deprecations","title":"Deprecating Resources and Properties (Alternative to Versioning)","anchors":[{"id":"deprecating-resource-classes-operations-and-properties","title":"Deprecating Resource Classes, Operations and Properties"},{"id":"setting-the-sunset-http-header-to-indicate-when-a-resource-or-an-operation-will-be-removed","title":"Setting the Sunset HTTP Header to Indicate When a Resource or an Operation Will Be Removed"}]},{"id":"default-order","title":"Overriding Default Order"},{"id":"performance","title":"Performance and Cache","anchors":[{"id":"enabling-the-built-in-http-cache-invalidation-system","title":"Enabling the Built-in HTTP Cache Invalidation System","anchors":[{"id":"extending-cache-tags-for-invalidation","title":"Extending Cache-Tags for Invalidation"}]},{"id":"setting-custom-http-cache-headers","title":"Setting Custom HTTP Cache Headers"},{"id":"enabling-the-metadata-cache","title":"Enabling the Metadata Cache"},{"id":"using-ppm-php-pm","title":"Using PPM (PHP-PM)"},{"id":"doctrine-queries-and-indexes","title":"Doctrine Queries and Indexes","anchors":[{"id":"search-filter","title":"Search Filter"},{"id":"eager-loading","title":"Eager Loading","anchors":[{"id":"max-joins","title":"Max Joins"},{"id":"fetch-partial","title":"Fetch Partial"},{"id":"force-eager","title":"Force Eager"},{"id":"override-at-resource-and-operation-level","title":"Override at Resource and Operation Level"},{"id":"disable-eager-loading","title":"Disable Eager Loading"}]},{"id":"partial-pagination","title":"Partial Pagination"}]},{"id":"profiling-with-blackfireio","title":"Profiling with Blackfire.io"}]},{"id":"extensions","title":"Extensions","anchors":[{"id":"custom-doctrine-orm-extension","title":"Custom Doctrine ORM Extension","anchors":[{"id":"example","title":"Example","anchors":[{"id":"blocking-anonymous-users","title":"Blocking Anonymous Users"}]}]},{"id":"custom-doctrine-mongodb-odm-extension","title":"Custom Doctrine MongoDB ODM Extension"},{"id":"custom-elasticsearch-extension","title":"Custom Elasticsearch Extension"}]},{"id":"messenger","title":"Symfony Messenger Integration: CQRS and Async Message Processing","anchors":[{"id":"installing-symfony-messenger","title":"Installing Symfony Messenger"},{"id":"dispatching-a-resource-through-the-message-bus","title":"Dispatching a Resource through the Message Bus"},{"id":"registering-a-message-handler","title":"Registering a Message Handler"},{"id":"accessing-the-data-returned-by-the-handler","title":"Accessing the Data Returned by the Handler"},{"id":"detecting-removals","title":"Detecting Removals"},{"id":"using-messenger-with-an-input-object","title":"Using Messenger with an Input Object"}]},{"id":"dto","title":"Using Data Transfer Objects (DTOs)","anchors":[{"id":"specifying-an-input-or-an-output-data-representation","title":"Specifying an Input or an Output Data Representation"},{"id":"updating-a-resource-with-a-custom-input","title":"Updating a Resource with a Custom Input"},{"id":"disabling-the-input-or-the-output","title":"Disabling the Input or the Output"},{"id":"per-operation-input-and-output","title":"Per Operation input and output"},{"id":"inputoutput-metadata","title":"Input/Output Metadata"},{"id":"using-objects-as-relations-inside-resources","title":"Using Objects As Relations Inside Resources"},{"id":"validating-data-transfer-objects","title":"Validating Data Transfer Objects"}]},{"id":"openapi","title":"OpenAPI Specification Support (formerly Swagger)","anchors":[{"id":"using-the-openapi-command","title":"Using the OpenAPI Command"},{"id":"overriding-the-openapi-specification","title":"Overriding the OpenAPI Specification"},{"id":"using-the-openapi-and-swagger-contexts","title":"Using the OpenAPI and Swagger Contexts"},{"id":"changing-the-name-of-a-definition","title":"Changing the Name of a Definition"},{"id":"changing-operations-in-the-openapi-documentation","title":"Changing Operations in the OpenAPI Documentation"},{"id":"changing-the-location-of-swagger-ui","title":"Changing the Location of Swagger UI","anchors":[{"id":"disabling-swagger-ui-or-redoc","title":"Disabling Swagger UI or ReDoc"},{"id":"manually-registering-the-swagger-ui-controller","title":"Manually Registering the Swagger UI Controller"}]},{"id":"using-a-custom-asset-package-in-swagger-ui","title":"Using a custom Asset Package in Swagger UI"},{"id":"overriding-the-ui-template","title":"Overriding the UI Template"},{"id":"compatibility-layer-with-amazon-api-gateway","title":"Compatibility Layer with Amazon API Gateway"},{"id":"oauth","title":"OAuth"}]},{"id":"json-schema","title":"JSON Schema Support","anchors":[{"id":"generating-a-json-schema","title":"Generating a JSON Schema"},{"id":"generating-a-json-schema-programmatically","title":"Generating a JSON Schema Programmatically"},{"id":"testing","title":"Testing"}]},{"id":"mercure","title":"Creating Async APIs using the Mercure Protocol","anchors":[{"id":"installing-mercure-support","title":"Installing Mercure Support"},{"id":"pushing-the-api-updates","title":"Pushing the API Updates"},{"id":"dispatching-private-updates-authorized-mode","title":"Dispatching Private Updates (Authorized Mode)"},{"id":"available-options","title":"Available Options"}]},{"id":"push-relations","title":"Pushing Related Resources Using HTTP/2"},{"id":"errors","title":"Errors Handling","anchors":[{"id":"converting-php-exceptions-to-http-errors","title":"Converting PHP Exceptions to HTTP Errors"}]},{"id":"external-vocabularies","title":"Using External Vocabularies"},{"id":"operation-path-naming","title":"Operation Path Naming","anchors":[{"id":"configuration","title":"Configuration"},{"id":"create-a-custom-operation-path-resolver","title":"Create a Custom Operation Path Resolver","anchors":[{"id":"defining-the-operation-segment-name-generator","title":"Defining the Operation Segment Name Generator"},{"id":"registering-the-service","title":"Registering the Service"},{"id":"configuring-it","title":"Configuring It"}]}]},{"id":"extending-jsonld-context","title":"Extending JSON-LD AND Hydra Contexts","anchors":[{"id":"json-ld","title":"JSON-LD"},{"id":"hydra","title":"Hydra"}]},{"id":"identifiers","title":"Identifiers","anchors":[{"id":"custom-identifier-normalizer","title":"Custom Identifier Normalizer"},{"id":"changing-identifier-in-a-doctrine-entity","title":"Changing Identifier in a Doctrine Entity"},{"id":"supported-identifiers","title":"Supported Identifiers"}]},{"id":"mongodb","title":"MongoDB Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-mongodb-support","title":"Enabling MongoDB Support"},{"id":"creating-documents","title":"Creating Documents"},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"},{"id":"adding-execute-options","title":"Adding Execute Options"}]},{"id":"elasticsearch","title":"Elasticsearch Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-reading-support","title":"Enabling Reading Support"},{"id":"creating-models","title":"Creating Models","anchors":[{"id":"creating-custom-mapping","title":"Creating custom mapping"}]},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"}]},{"id":"controllers","title":"Creating Custom Operations and Controllers","anchors":[{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"retrieving-the-entity","title":"Retrieving the Entity"},{"id":"alternative-method","title":"Alternative Method"}]},{"id":"events","title":"The Event System","anchors":[{"id":"built-in-event-listeners","title":"Built-in Event Listeners"},{"id":"custom-event-listeners","title":"Custom Event Listeners"}]},{"id":"file-upload","title":"Handling File Upload","anchors":[{"id":"installing-vichuploaderbundle","title":"Installing VichUploaderBundle"},{"id":"configuring-the-entity-receiving-the-uploaded-file","title":"Configuring the Entity Receiving the Uploaded File"},{"id":"handling-file-upload","title":"Handling File Upload"},{"id":"resolving-the-file-url","title":"Resolving the File URL"},{"id":"making-a-request-to-the-media_objects-endpoint","title":"Making a Request to the /media_objects Endpoint"},{"id":"linking-a-mediaobject-resource-to-another-resource","title":"Linking a MediaObject Resource to Another Resource"}]},{"id":"jwt","title":"JWT Authentication","anchors":[{"id":"installing-lexikjwtauthenticationbundle","title":"Installing LexikJWTAuthenticationBundle"},{"id":"configuring-the-symfony-securitybundle","title":"Configuring the Symfony SecurityBundle","anchors":[{"id":"adding-authentication-to-an-api-which-uses-a-path-prefix","title":"Adding Authentication to an API Which Uses a Path Prefix"}]},{"id":"documenting-the-authentication-mechanism-with-swaggeropen-api","title":"Documenting the Authentication Mechanism with Swagger/Open API","anchors":[{"id":"configuring-api-platform","title":"Configuring API Platform"},{"id":"adding-a-new-api-key","title":"Adding a New API Key"},{"id":"adding-endpoint-to-swaggerui-to-retrieve-a-jwt-token","title":"Adding endpoint to SwaggerUI to retrieve a JWT token"}]},{"id":"testing","title":"Testing"}]},{"id":"form-data","title":"Accept application/x-www-form-urlencoded Form Data","anchors":[{"id":"create-your-deserializelistener-decorator","title":"Create your DeserializeListener Decorator"},{"id":"creating-the-service-definition","title":"Creating the Service Definition"}]},{"id":"angularjs-integration","title":"AngularJS Integration","anchors":[{"id":"restangular","title":"Restangular"},{"id":"ng-admin","title":"ng-admin"}]},{"id":"fosuser-bundle","title":"FOSUserBundle Integration","anchors":[{"id":"installing-the-bundle","title":"Installing the Bundle"},{"id":"enabling-the-bridge","title":"Enabling the Bridge"},{"id":"creating-a-user-entity-with-serialization-groups","title":"Creating a User Entity with Serialization Groups"}]},{"id":"nelmio-api-doc","title":"NelmioApiDocBundle Integration"},{"id":"bootstrap","title":"Bootstraping the core library"},{"id":"configuration","title":"Configuration"}]},{"title":"The Schema Generator Component","path":"schema-generator","items":[{"id":"index","title":"The Schema Generator","anchors":[{"id":"what-is-schemaorg","title":"What Is Schema.org?"},{"id":"why-use-schemaorg-data-to-generate-a-php-model","title":"Why Use Schema.org Data to Generate a PHP Model?","anchors":[{"id":"dont-reinvent-the-wheel","title":"Don't Reinvent the Wheel"},{"id":"improve-seo-and-user-experience","title":"Improve SEO and User Experience"},{"id":"be-ready-for-the-future","title":"Be Ready for The Future"}]},{"id":"documentation","title":"Documentation"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"model-scaffolding","title":"Model Scaffolding","anchors":[{"id":"going-further","title":"Going Further"}]},{"id":"cardinality-extraction","title":"Cardinality Extraction"}]},{"id":"configuration","title":"Configuration","anchors":[{"id":"customizing-php-namespaces","title":"Customizing PHP Namespaces"},{"id":"forcing-a-field-range","title":"Forcing a Field Range"},{"id":"forcing-a-field-cardinality","title":"Forcing a Field Cardinality"},{"id":"forcing-a-relation-table-name","title":"Forcing a Relation Table Name"},{"id":"forcing-or-disabling-a-class-parent","title":"Forcing (or Disabling) a Class Parent"},{"id":"forcing-a-class-to-be-abstract","title":"Forcing a Class to be Abstract"},{"id":"forcing-a-nullable-property","title":"Forcing a Nullable Property"},{"id":"forcing-a-unique-property","title":"Forcing a Unique Property"},{"id":"making-a-property-read-only","title":"Making a Property Read-Only"},{"id":"making-a-property-write-only","title":"Making a Property Write-Only"},{"id":"forcing-a-property-to-be-in-a-serialization-group","title":"Forcing a Property to be in a Serialization Group"},{"id":"forcing-an-embeddable-class-to-be-embedded","title":"Forcing an Embeddable Class to be Embedded"},{"id":"author-phpdoc","title":"Author PHPDoc"},{"id":"disabling-generators-and-creating-custom-ones","title":"Disabling Generators and Creating Custom Ones"},{"id":"skipping-accessor-method-generation","title":"Skipping Accessor Method Generation"},{"id":"disabling-the-id-generator","title":"Disabling the id Generator"},{"id":"generating-uuids","title":"Generating UUIDs"},{"id":"user-submitted-uuids","title":"User submitted UUIDs"},{"id":"generating-custom-ids","title":"Generating Custom IDs"},{"id":"disabling-usage-of-doctrine-collections","title":"Disabling Usage of Doctrine Collections"},{"id":"changing-the-field-visibility","title":"Changing the Field Visibility"},{"id":"generating-asserttype-annotations","title":"Generating @Assert\\Type Annotations"},{"id":"forcing-doctrine-inheritance-mapping-annotation","title":"Forcing Doctrine Inheritance Mapping Annotation"},{"id":"interfaces-and-doctrine-resolve-target-entity-listener","title":"Interfaces and Doctrine Resolve Target Entity Listener"},{"id":"custom-schemas","title":"Custom Schemas"},{"id":"checking-goodrelation-compatibility","title":"Checking GoodRelation Compatibility"},{"id":"php-file-header","title":"PHP File Header"},{"id":"full-configuration-reference","title":"Full Configuration Reference"}]}]},{"title":"The Admin Component","path":"admin","items":[{"id":"index","title":"The API Platform Admin","anchors":[{"id":"features","title":"Features"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"creating-the-admin","title":"Creating the Admin"}]},{"id":"handling-relations","title":"Handling Relations","anchors":[{"id":"embedded-relations","title":"Embedded Relations"},{"id":"display-a-field-of-an-embedded-relation","title":"Display a Field of an Embedded Relation"},{"id":"using-an-autocomplete-input-for-relations","title":"Using an Autocomplete Input for Relations"}]},{"id":"schema.org","title":"Using the Schema.org Vocabulary","anchors":[{"id":"displaying-related-resources-name-instead-of-its-iri","title":"Displaying Related Resource's Name Instead of its IRI"},{"id":"emails-urls-and-identifiers","title":"Emails, URLs and Identifiers"}]},{"id":"authentication-support","title":"Authentication Support"},{"id":"file-upload","title":"Handling File Upload"},{"id":"performance","title":"Performance","anchors":[{"id":"retrieve-all-relations-in-one-request","title":"Retrieve All Relations in One Request"}]},{"id":"customizing","title":"Customizing the Admin","anchors":[{"id":"customizing-the-admins-main-page-and-the-resource-list","title":"Customizing the Admin's Main Page and the Resource List"},{"id":"customizing-the-list-view","title":"Customizing the List View"},{"id":"customizing-the-show-view","title":"Customizing the Show View"},{"id":"customizing-the-create-form","title":"Customizing the Create Form"},{"id":"customizing-the-edit-form","title":"Customizing the Edit Form"},{"id":"going-further","title":"Going Further"}]},{"id":"components","title":"Components","anchors":[{"id":"resource-components","title":"Resource Components","anchors":[{"id":"adminguesser","title":"AdminGuesser"},{"id":"resourceguesser","title":"ResourceGuesser"}]},{"id":"page-components","title":"Page Components","anchors":[{"id":"listguesser","title":"ListGuesser"},{"id":"createguesser","title":"CreateGuesser"},{"id":"editguesser","title":"EditGuesser"},{"id":"showguesser","title":"ShowGuesser"}]},{"id":"hydra","title":"Hydra","anchors":[{"id":"hydraadmin","title":"HydraAdmin"},{"id":"dataprovider","title":"dataProvider"},{"id":"schemaanalyzer","title":"schemaAnalyzer"}]},{"id":"other-components","title":"Other Components","anchors":[{"id":"pagination","title":"Pagination"},{"id":"fieldguesser","title":"FieldGuesser"},{"id":"inputguesser","title":"InputGuesser"}]}]}]},{"title":"The Client Generator Component","path":"client-generator","items":[{"id":"index","title":"The API Platform Client Generator","anchors":[{"id":"features","title":"Features"}]},{"id":"react","title":"React Generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-progressive-web-app","title":"Generating a Progressive Web App"},{"id":"screenshots","title":"Screenshots"}]},{"id":"nextjs","title":"Next.js Generator","anchors":[{"id":"install","title":"Install","anchors":[{"id":"next--express-server","title":"Next + Express Server"},{"id":"installing-the-generator-dependencies","title":"Installing the Generator Dependencies"}]},{"id":"generating-routes","title":"Generating Routes"},{"id":"starting-the-project","title":"Starting the Project"},{"id":"screenshots","title":"Screenshots"}]},{"id":"nuxtjs","title":"Nuxt.js Generator","anchors":[{"id":"install","title":"Install","anchors":[{"id":"nuxt","title":"Nuxt"},{"id":"installing-the-generator-dependencies","title":"Installing the Generator Dependencies"}]},{"id":"updating-nuxtjs-config","title":"Updating nuxtjs config"},{"id":"generating-routes","title":"Generating Routes"},{"id":"updating-default-layout","title":"Updating default layout"},{"id":"starting-the-project","title":"Starting the Project"},{"id":"screenshots","title":"Screenshots"}]},{"id":"react-native","title":"React Native generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-native-app","title":"Generating a Native App"},{"id":"screenshots-in-ios-simulator","title":"Screenshots in iOS Simulator"}]},{"id":"vuejs","title":"Vue.js Generator"},{"id":"vuetify","title":"Vuetify Generator","anchors":[{"id":"install-with-docker","title":"Install with Docker"},{"id":"install-without-docker","title":"Install without Docker"},{"id":"generating-the-vuejs-web-app","title":"Generating the VueJS Web App"}]},{"id":"quasar","title":"Quasar Framework Generator"},{"id":"typescript","title":"TypeScript Interfaces","anchors":[{"id":"example","title":"Example"}]},{"id":"troubleshooting","title":"Troubleshooting"}]},{"title":"Deployment","path":"deployment","items":[{"id":"index","title":"Deploying API Platform Applications"},{"id":"kubernetes","title":"Deploying to a Kubernetes Cluster","anchors":[{"id":"preparing-your-cluster-and-your-local-machine","title":"Preparing Your Cluster and Your Local Machine"},{"id":"creating-and-publishing-the-docker-images","title":"Creating and Publishing the Docker Images"},{"id":"deploying","title":"Deploying"},{"id":"initializing-the-database","title":"Initializing the Database"},{"id":"tiller-rbac-issue","title":"Tiller RBAC Issue"}]},{"id":"docker-compose","title":"Deploying with Docker Compose","anchors":[{"id":"installing-the-docker-compose-setup-for-production","title":"Installing the Docker Compose Setup for Production"},{"id":"building-and-pushing-the-docker-images","title":"Building and Pushing the Docker Images"},{"id":"pulling-the-docker-images-and-running-the-services","title":"Pulling the Docker Images and Running the Services"},{"id":"running-the-docker-compose-setup-for-production-locally","title":"Running the Docker Compose Setup for Production Locally"}]},{"id":"heroku","title":"Deploying an API Platform App on Heroku"},{"id":"traefik","title":"Implement Træfik Into API Platform Dockerized","anchors":[{"id":"basic-implementation","title":"Basic Implementation"},{"id":"known-issues","title":"Known Issues"},{"id":"going-further","title":"Going Further"},{"id":"multiple-instances","title":"Multiple Instances"},{"id":"more-generic-approach","title":"More Generic Approach"}]}]},{"title":"General Information","path":"extra","items":[{"id":"philosophy","title":"API Platform's Philosophy"},{"id":"releases","title":"The Release Process"},{"id":"enterprise","title":"API Platform for Enterprise","anchors":[{"id":"enterprise-ready-open-source-softwaremanaged-for-you","title":"Enterprise-ready open source software—managed for you"}]},{"id":"security","title":"Security Policy","anchors":[{"id":"reporting-a-security-issue","title":"Reporting a Security Issue"},{"id":"resolving-process","title":"Resolving Process"},{"id":"security-updates-with-tidelift","title":"Security Updates With Tidelift"},{"id":"issue-severity","title":"Issue Severity","anchors":[{"id":"attack-complexity","title":"Attack Complexity"},{"id":"impact","title":"Impact"},{"id":"affected-projects","title":"Affected Projects"},{"id":"score-totals","title":"Score Totals"},{"id":"severity-levels","title":"Severity levels"}]},{"id":"credits","title":"Credits"}]},{"id":"troubleshooting","title":"Troubleshooting","anchors":[{"id":"using-docker","title":"Using Docker","anchors":[{"id":"with-docker-toolbox-on-windows","title":"With Docker Toolbox on Windows"},{"id":"error-starting-userland-proxy","title":"Error starting userland proxy"}]},{"id":"using-api-platform-and-jms-serializer-in-the-same-project","title":"Using API Platform and JMS Serializer in the same project"},{"id":"upstream-sent-too-big-header-while-reading-response-header-from-upstream-502-error","title":"\"upstream sent too big header while reading response header from upstream\" 502 Error"}]},{"id":"contribution-guides","title":"Contribution guides"},{"id":"conduct","title":"Contributor Code of Conduct","anchors":[{"id":"our-pledge","title":"Our Pledge"},{"id":"our-standards","title":"Our Standards"},{"id":"our-responsibilities","title":"Our Responsibilities"},{"id":"scope","title":"Scope"},{"id":"enforcement","title":"Enforcement"},{"id":"attribution","title":"Attribution"}]}]}]},"next":{"slug":"/docs/master/core/configuration/","title":"Configuration"},"prefixedVersion":"master","previous":{"slug":"/docs/master/core/nelmio-api-doc/","title":"NelmioApiDocBundle Integration"},"title":"Bootstraping the core library","urlEditDocumentation":"https://github.com/api-platform/docs/edit/master/core/bootstrap.md","version":"master/"}},"staticQueryHashes":["1552981879"]}